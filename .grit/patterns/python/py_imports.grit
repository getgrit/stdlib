language python

/** This is a utility file, you do not need to implement it yourself */

pattern import_from($source, $names) {
    import_from_statement(name=$names, module_name=dotted_name(name=$source)),
}

pattern before_each_file_prep_imports() {
    $_ where {
        $GLOBAL_NEW_BARE_IMPORT_NAMES = [],
        $GLOBAL_NEW_FROM_IMPORT_SOURCES = [],
        $GLOBAL_NEW_FROM_IMPORT_NAMES = [],
        $GLOBAL_IMPORTS_TO_REMOVE = [],
    }
}

pattern after_each_file_handle_imports() {
  file($body) where {
    $body <: maybe insert_imports(),
    $body <: maybe handle_remove_imports()
  }
}

pattern process_one_source($p, $all_imports) {
    [$p, $source] where {
        $new_names = [],
        $GLOBAL_NEW_FROM_IMPORT_NAMES <: some bubble($new_names) [$p, $name, $source] where {
            $new_names += $name,
        },
        if ($p <: module(statements = some import_from($source, $names))) {
            $names_to_add = "",
            $new_names <: some $name where {
                if (!$names <: some $name) {
                    $names_to_add += `, $name`
                }
            },
            $names => `$names$names_to_add`,
        } else {
            $joined_names = join(list = $new_names, separator = ", "),
            $all_imports += `from $source import $joined_names\n`,
        }
    }
}

// TODO: remove imports from the global list as we remove them
pattern handle_one_removal_candidate() {
  // $name represents the AST node we imported from a package that should be removed
  or {
    `from $src import $mods` as $full_import where {
      $keep_some = false,
      $mods <: some bubble($keep_some) or {
        aliased_import(alias=$name) where {
          $GLOBAL_IMPORTS_TO_REMOVE <: some bubble($name) $name
        } => .,
        `$name` where {
          $GLOBAL_IMPORTS_TO_REMOVE <: some bubble($name) $name
        } => .,
        $other where {
          $keep_some = true
        }
      },
      if ($keep_some <: false) {
        $full_import => .
      }
    },
    `import $mod` where {
      $GLOBAL_IMPORTS_TO_REMOVE <: some bubble($mod) $mod
    } => .,
    `import $mod as $alias` where {
      $GLOBAL_IMPORTS_TO_REMOVE <: some bubble($alias) $alias
    } => .,
  }
}

pattern handle_remove_imports() {
  $body where {
    $body <: contains handle_one_removal_candidate()
  }
}

pattern remove_import() {
  $name where {
    if ($GLOBAL_IMPORTS_TO_REMOVE <: not some $name) {
      $GLOBAL_IMPORTS_TO_REMOVE += $name
    }
  }
}

pattern insert_imports() {
    $body where {
        $all_imports = "",
        $GLOBAL_NEW_FROM_IMPORT_SOURCES <: maybe some process_one_source($p, $all_imports),
        $GLOBAL_NEW_BARE_IMPORT_NAMES <: maybe some bubble($all_imports) $name where {
            $all_imports += `import $name\n`,
        },
        if (!$all_imports <: "") {
            $body => `$all_imports\n$body`
        }
    }
}

pattern imported_from($source) {
    $name where {
        $program <: module($statements),
        $statements <: some bubble($name, $source) import_from($source, $names) where {
            $names <: some $name,
        }
    }
}

pattern ensure_import_from($source) {
    $name where {
        if ($name <: not imported_from($source)) {
            if ($GLOBAL_NEW_FROM_IMPORT_SOURCES <: not some [$program, $source]) {
                $GLOBAL_NEW_FROM_IMPORT_SOURCES += [$program, $source]
            },
            if ($GLOBAL_NEW_FROM_IMPORT_NAMES <: not some [$program, $name, $source]) {
                $GLOBAL_NEW_FROM_IMPORT_NAMES += [$program, $name, $source]
            }
        }
    }
}

pattern is_bare_imported() {
    $name where {
        $program <: module($statements),
        $statements <: some import_statement(name=$names) where {
            $names <: some dotted_name(name=$name),
        },
    }
}

pattern ensure_bare_import() {
    $name where {
        if ($name <: not is_bare_imported()) {
            if ($GLOBAL_NEW_BARE_IMPORT_NAMES <: not some $name) {
                $GLOBAL_NEW_BARE_IMPORT_NAMES += [$name]
            }
        }
    }
}

predicate add_import($name, $source) {
    if ($name <: undefined) {
      $source <: ensure_bare_import(),
    } else {
      $name <: ensure_import_from(source=$source)
    }
}


/// Check if a list is a prefix of another list
function list_prefix_matches($target, $prefix) {
    $index = 0,
    $prefix <: every bubble($target, $prefix, $index) $current where {
        if ($prefix[$index] <: not undefined) {
            $target[$index] <: $prefix[$index]
        },
        $index += 1
    }
}


pattern py_find_replace_import($from_package, $from_name, $to_package, $to_name) {
    or {
        import_from($source, $names) as $anchor where {
        $has_target = false,
        $has_other = false,
        $source <: includes $from_package,
        /// We might need to continue an alias here
        $replacement_name = $to_name,
        // Look at each name in a loop
        $names <: some bubble($from_name, $has_other, $has_target, $replacement_name, $to_name) $this_name where {
          or {
            $this_name <: aliased_import(name=contains $from_name, $alias) => . where {
              $replacement_name = `$to_name as $alias`,
              $has_target = true
            },
            $this_name <: contains `$from_name` => . where $has_target = true,
            $has_other = true,
          }
        },
        $has_target <: true,
        if ($has_other <: true) {
          $anchor += `\nfrom $to_package import $replacement_name`
        } else {
          $anchor => `from $to_package import $replacement_name`
        }
      },
      `import $name` as $anchor where {
          $name <: dotted_name(name=$name_parts),
          $target = $name_parts,
          $prefix = split($from_package, "."),
          $prefix += $from_name,
          // TODO: extract into a universal function
          $index = 0,
          $prefix <: every bubble($target, $prefix, $index) $current where {
              if ($prefix[$index] <: not undefined) {
                  $target[$index] <: $prefix[$index]
              },
              $index += 1
          },
          $anchor => `import $to_package.$to_name`
      }
    }
}

pattern find_replace_imports($list) {
  $node where {
    $list <: some bubble($node) [$from_package, $from_name, $to_package, $to_name] where {
      $node <: py_find_replace_import($from_package, $from_name, $to_package, $to_name)
    }
  }
}