language go

pattern before_each_file_prep_imports() {
    $_ where {
        $GLOBAL_NEW_IMPORTS = [],
    }
}

// Handle inserting imports if we accumulated any
pattern after_each_file_handle_imports() {
    
}

function require_import($source) {
    // Default condition
    $split_source = split($source, "/"),
    $name_to_use = $split_source[-1],
    or {
        $program <: contains import_of($source)
    }
    
    $program <: contains 
    $GLOBAL_NEW_IMPORTS += [$source],
    return $name_to_use
}

pattern import_of($source) {
    import_declaration(imports=import_spec_list(imports=$mod)) where {
        $mod <: not contains $source,
        $mod += $source
    }
}


pattern ensure_import($source) {
    import_declaration(imports=import_spec_list(imports=$mod)) where {
        $mod <: not contains $source,
        $mod += $source
    }
}